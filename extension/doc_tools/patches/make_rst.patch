diff --git a/extension/doc_tools/make_rst.py b/extension/doc_tools/make_rst.py
index efd902f..f6e7fa2 100644
--- a/extension/doc_tools/make_rst.py
+++ b/extension/doc_tools/make_rst.py
@@ -9,11 +9,11 @@ import sys
 import xml.etree.ElementTree as ET
 from collections import OrderedDict
 from typing import Any, Dict, List, Optional, TextIO, Tuple, Union
+import subprocess
 
 # Import hardcoded version information from version.py
 root_directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../../")
 sys.path.append(root_directory)  # Include the root directory
-import version  # noqa: E402
 
 # $DOCS_URL/path/to/page.html(#fragment-tag)
 GODOT_DOCS_PATTERN = re.compile(r"^\$DOCS_URL/(.*)\.html(#.*)?$")
@@ -674,6 +674,13 @@ class ScriptLanguageParityCheck:
         self.hit_map[class_name].append((context, error))
 
 
+def get_engine_url() -> str:
+    return "https://github.com/godotengine/godot"
+
+def get_engine_release() -> str:
+    return "4.3-stable"
+
+
 # Entry point for the RST generator.
 def main() -> None:
     parser = argparse.ArgumentParser()
@@ -744,21 +751,45 @@ def main() -> None:
         else:
             print(f'No PO file at "{lang_file}" for language "{args.lang}".')
 
+    print("Downloading Godot XML class references...")
+
+    doc_cache_path = "extension/doc_tools/cache/engine"
+
+    if not os.path.exists(doc_cache_path):
+        os.makedirs(doc_cache_path)
+        engine_url = get_engine_url()
+        subprocess.call("git init", cwd=doc_cache_path, shell=True)
+        subprocess.call(f"git remote add origin {engine_url}", cwd=doc_cache_path, shell=True)
+
+    engine_release = get_engine_release()
+    if subprocess.call(f"git pull --depth=1 origin {engine_release}", cwd=doc_cache_path, shell=True) != 0:
+        print_error(f'Git pull for "{engine_url}" v{engine_release} failed. Type references will fail.', State())
+
+    engine_doc_paths = [
+        os.path.join(doc_cache_path, "doc/classes"),
+        os.path.join(doc_cache_path, "modules"),
+        os.path.join(doc_cache_path, "platform")
+    ]
+
     print("Checking for errors in the XML class reference...")
 
     file_list: List[str] = []
+    game_class_list: List[str] = []
 
-    for path in args.path:
+    for path in (args.path + engine_doc_paths):
         # Cut off trailing slashes so os.path.basename doesn't choke.
         if path.endswith("/") or path.endswith("\\"):
             path = path[:-1]
 
-        if os.path.basename(path) in ["modules", "platform"]:
+        if os.path.basename(path) in ["modules", "platform", "extension"]:
             for subdir, dirs, _ in os.walk(path):
                 if "doc_classes" in dirs:
                     doc_dir = os.path.join(subdir, "doc_classes")
                     class_file_names = (f for f in os.listdir(doc_dir) if f.endswith(".xml"))
                     file_list += (os.path.join(doc_dir, f) for f in class_file_names)
+                    if doc_dir == "extension/doc_classes":
+                        game_class_list += (os.path.splitext(os.path.basename(f))[0] for f in file_list)
+                        break
 
         elif os.path.isdir(path):
             file_list += (os.path.join(path, f) for f in os.listdir(path) if f.endswith(".xml"))
@@ -806,6 +837,8 @@ def main() -> None:
     grouped_classes: Dict[str, List[str]] = {}
 
     for class_name, class_def in state.classes.items():
+        if class_name not in game_class_list:
+            continue
         if args.filter and not pattern.search(class_def.filepath):
             continue
         state.current_class = class_name
@@ -899,9 +932,6 @@ def translate(string: str) -> str:
 
 
 def get_git_branch() -> str:
-    if hasattr(version, "docs") and version.docs != "latest":
-        return version.docs
-
     return "master"
 
 
@@ -928,11 +958,11 @@ def make_rst_class(class_def: ClassDef, state: State, dry_run: bool, output_dir:
 
         git_branch = get_git_branch()
         source_xml_path = os.path.relpath(class_def.filepath, root_directory).replace("\\", "/")
-        source_github_url = f"https://github.com/godotengine/godot/tree/{git_branch}/{source_xml_path}"
-        generator_github_url = f"https://github.com/godotengine/godot/tree/{git_branch}/doc/tools/make_rst.py"
+        source_github_url = f"https://github.com/OpenVicProject/OpenVic/tree/{git_branch}/{source_xml_path}"
+        generator_github_url = f"https://github.com/OpenVicProject/OpenVic/tree/{git_branch}/extension/doc_tools/make_rst.py"
 
         f.write(".. DO NOT EDIT THIS FILE!!!\n")
-        f.write(".. Generated automatically from Godot engine sources.\n")
+        f.write(".. Generated automatically from OpenVic game sources.\n")
         f.write(f".. Generator: {generator_github_url}.\n")
         f.write(f".. XML source: {source_github_url}.\n\n")
 
@@ -1751,7 +1781,7 @@ def make_rst_index(grouped_classes: Dict[str, List[str]], dry_run: bool, output_
         # Also provide links to the source files for reference.
 
         git_branch = get_git_branch()
-        generator_github_url = f"https://github.com/godotengine/godot/tree/{git_branch}/doc/tools/make_rst.py"
+        generator_github_url = f"https://github.com/OpenVicProject/OpenVic/tree/{git_branch}/extension/doc_tools/make_rst.py"
 
         f.write(".. DO NOT EDIT THIS FILE!!!\n")
         f.write(".. Generated automatically from Godot engine sources.\n")
